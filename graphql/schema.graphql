enum AuthRole {
  ADMINISTRATOR
  UNVERIFIED
  VERIFIED
}

input AuthRoleFilter {
  equals: AuthRole
  in: [AuthRole!]
  notIn: [AuthRole!]
}

type AuthUser implements Node {
  email: String!
  globalId: ID!
  id: ID!
  role: AuthRole!
}

input AuthUserFilter {
  role: AuthRoleFilter
}

input AuthUserOrderBy {
  email: OrderBy
  role: OrderBy
}

input AuthUserUniqueFilter {
  email: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  ping: String!
}

interface Node {
  globalId: ID!
}

enum OrderBy {
  Asc
  Desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  authUsers(after: String, before: String, first: Int, last: Int, orderBy: AuthUserOrderBy!, where: AuthUserFilter!): QueryAuthUsersConnection!

  """Current application version"""
  version: String!
}

type QueryAuthUsersConnection {
  edges: [QueryAuthUsersConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryAuthUsersConnectionEdge {
  cursor: String!
  node: AuthUser!
}

scalar Upload