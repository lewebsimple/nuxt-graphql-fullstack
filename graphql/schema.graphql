enum AuthRole {
  ADMINISTRATOR
  UNVERIFIED
  VERIFIED
}

type AuthUser implements Node {
  email: String!
  globalId: ID!
  id: ID!
  role: AuthRole!
}

input AuthUserFiltersMany {
  role: AuthRole
  search: String
}

input AuthUserSort {
  by: AuthUserSortBy!
  order: SortOrder!
}

enum AuthUserSortBy {
  email
  role
}

input AuthUserWhereUnique {
  email: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  ping: String!
}

interface Node {
  globalId: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  authUserFindMany(after: String, before: String, filters: AuthUserFiltersMany!, first: Int, last: Int, sort: AuthUserSort!): QueryAuthUserFindManyConnection!
  authUserFindUnique(where: AuthUserWhereUnique!): AuthUser

  """Current application version"""
  version: String!
}

type QueryAuthUserFindManyConnection {
  edges: [QueryAuthUserFindManyConnectionEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type QueryAuthUserFindManyConnectionEdge {
  cursor: String!
  node: AuthUser!
}

enum SortOrder {
  asc
  desc
}

scalar Upload